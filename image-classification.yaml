apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: minio-image-workflow-
spec:
  entrypoint: image-workflow
  templates:
    - name: image-workflow
      steps:
        - - name: download-images
            template: download-images
        - - name: preprocess-images
            template: preprocess-images
            arguments:
              artifacts:
                - name: images
                  from: "{{steps.download-images.outputs.artifacts.images}}"
        - - name: process-images
            template: process-images
            arguments:
              artifacts:
                - name: images
                  from: "{{steps.preprocess-images.outputs.artifacts.images}}"
        - - name: classify-images
            template: classify-images
            arguments:
              artifacts:
                - name: images
                  from: "{{steps.process-images.outputs.artifacts.images}}"
        - - name: upload-results
            template: upload-results
            arguments:
              artifacts:
                - name: results
                  from: "{{steps.classify-images.outputs.artifacts.results}}"

    # Step 1: Download images from MinIO
    - name: download-images
      outputs:
        artifacts:
          - name: images
            path: /tmp/images
      container:
        image: minio/mc
        envFrom:
          - secretRef:
              name: minio-secret
        command: [sh, -c]
        args:
          - |
            mkdir -p /tmp/images
            mc alias set myminio "$MINIO_SERVER_HOST" "$MINIO_SERVER_ACCESS_KEY" "$MINIO_SERVER_SECRET_KEY"
            mc cp --recursive myminio/argo-workflows/images/ /tmp/images

    # Step 2: Preprocess images
    - name: preprocess-images
      inputs:
        artifacts:
          - name: images
            path: /tmp/images
      outputs:
        artifacts:
          - name: images
            path: /tmp/preprocessed
      container:
        image: bitnami/python:latest
        command: [ sh, -c ]
        args:
          - |
            pip install --no-cache-dir pillow && \
            python3 -u -c "
            import os
            from PIL import Image
            input_dir = '/tmp/images'
            output_dir = '/tmp/preprocessed'
            os.makedirs(output_dir, exist_ok=True)
            for f in os.listdir(input_dir):
                if f.endswith('.jpg') or f.endswith('.png'):
                    img = Image.open(os.path.join(input_dir, f))
                    img = img.resize((256, 256))
                    img.save(os.path.join(output_dir, f))
            "

    # Step 3: Process images (convert to grayscale)
    - name: process-images
      inputs:
        artifacts:
          - name: images
            path: /tmp/preprocessed
      outputs:
        artifacts:
          - name: images
            path: /tmp/processed
      container:
        image: bitnami/python:latest
        command: [ sh, -c ]
        args:
          - |
            pip install --no-cache-dir pillow && \
            python3 -u -c "
            import os
            from PIL import Image
            input_dir = '/tmp/preprocessed'
            output_dir = '/tmp/processed'
            os.makedirs(output_dir, exist_ok=True)
            for f in os.listdir(input_dir):
                if f.endswith('.jpg') or f.endswith('.png'):
                    img = Image.open(os.path.join(input_dir, f))
                    img = img.convert('L')
                    img.save(os.path.join(output_dir, f))
            "

    # Step 3.5: Classify images
    - name: classify-images
      inputs:
        artifacts:
          - name: images
            path: /tmp/processed
      outputs:
        artifacts:
          - name: results
            path: /tmp/results
      container:
        image: bitnami/python:latest
        command: [ sh, -c ]
        args:
          - |
            pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu && \
            python3 -u -c "
            import os, json
            from PIL import Image
            import torch
            import torchvision.transforms as transforms
            import torchvision.models as models

            input_dir = '/tmp/processed'
            output_dir = '/tmp/results'
            os.makedirs(output_dir, exist_ok=True)

            model = models.resnet18(pretrained=True)
            model.eval()
            transform = transforms.Compose([
                transforms.Resize(256),
                transforms.CenterCrop(224),
                transforms.ToTensor(),
                transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                     std=[0.229, 0.224, 0.225]),
            ])

            # Load ImageNet labels
            import urllib.request
            labels_url = 'https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt'
            class_names = urllib.request.urlopen(labels_url).read().decode('utf-8').splitlines()
  
            results = []
  
            for f in os.listdir(input_dir):
              if f.endswith('.jpg') or f.endswith('.png'):
                img = Image.open(os.path.join(input_dir, f)).convert('RGB')
                x = transform(img).unsqueeze(0)
                with torch.no_grad():
                  y = model(x)
                cls_id = y.argmax(1).item()
                cls_name = class_names[cls_id]
                results.append({
                'file': f,
                'class_id': cls_id,
                'class_name': cls_name
              })
  
            with open(os.path.join(output_dir, 'results.json'), 'w') as out:
              json.dump(results, out, indent=2)
            "

    # Step 4: Upload results to MinIO
    - name: upload-results
      inputs:
        artifacts:
          - name: results
            path: /tmp/results
      container:
        image: minio/mc
        envFrom:
          - secretRef:
              name: minio-secret
        command: [sh, -c]
        args:
          - |
            mc alias set myminio "$MINIO_SERVER_HOST" "$MINIO_SERVER_ACCESS_KEY" "$MINIO_SERVER_SECRET_KEY"
            mc cp --recursive /tmp/results/ myminio/argo-workflows/results/{{workflow.name}}